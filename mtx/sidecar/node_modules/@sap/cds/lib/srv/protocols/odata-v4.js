const cds = require('../../index'),
  { User } = cds,
  { decodeURI } = cds.utils
const libx = require('../../../libx/_runtime')
const LOG = cds.log('odata')
const express = require('express') // eslint-disable-line cds/no-missing-dependencies

module.exports = function ODataAdapter(srv) {
  const router = express.Router()

  router.use((req, _, next) => {
    let u = req.user
    req.user = u instanceof User ? u : new User(u)

    let url = decodeURI(req.originalUrl)
    LOG && LOG(req.method, url, req.body || '')
    if (/\$batch/.test(req.url))
      req.on('dispatch', req => {
        let path = decodeURI(req._path)
        LOG && LOG('>', req.event, path, req._query || '')
        if (LOG._debug && req.query) LOG.debug(req.query)
      })

    next()
  })

  if (cds.env.features.odata_new_adapter) {
    // REVISIT: add middleware for negative cases?
    router.use(/^\/$/, require('../../../libx/odata/service-document')(srv))
    router.use('/\\$metadata', require('../../../libx/odata/metadata')(srv))
    router.get('*', require('../../../libx/odata/read')(srv))
    router.use(require('../../../libx/odata/error')(srv))
  }

  router.use(libx.to.odata_v4(srv))

  return router
}
