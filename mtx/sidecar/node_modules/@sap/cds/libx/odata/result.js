const METADATA = {
  $context: '@odata.context',
  $count: '@odata.count',
  $etag: '@odata.etag',
  $metadataEtag: '@odata.metadataEtag',
  $bind: '@odata.bind',
  $id: '@odata.id',
  $delta: '@odata.delta',
  $removed: '@odata.removed',
  $type: '@odata.type',
  $nextLink: '@odata.nextLink',
  $deltaLink: '@odata.deltaLink',
  $editLink: '@odata.editLink',
  $readLink: '@odata.readLink',
  $navigationLink: '@odata.navigationLink',
  $associationLink: '@odata.associationLink',
  $mediaEditLink: '@odata.mediaEditLink',
  $mediaReadLink: '@odata.mediaReadLink',
  $mediaContentType: '@odata.mediaContentType',
  $mediaContentDispositionFilename: '@odata.mediaContentDispositionFilename', // > not supported by okra
  $mediaContentDispositionType: '@odata.mediaContentDispositionType', // > not supported by okra
  $mediaEtag: '@odata.mediaEtag'
}

const _cleanupMetadata = (odataResult, result) => {
  if (typeof result !== 'object') return odataResult

  const keysToCleanup = {
    // do not set "@odata.context" as it may be inherited of remote service
    $context: true,
    // REVISIT: okra doesn't support content disposition
    $mediaContentDispositionFilename: true,
    $mediaContentDispositionType: true
  }

  for (const key in METADATA) {
    if (!(key in result)) continue
    if (!keysToCleanup[key]) {
      odataResult[METADATA[key]] = result[key]
    }
    delete result[key]
  }

  return odataResult
}

const _setContext = (odataResult, info, isCollection) => {
  if (info && info.metadata) {
    const result = isCollection || info.metadata.propertyName ? odataResult : odataResult.value

    if (result != null) Object.assign(result, { [METADATA.$context]: info.metadata.contextUrl })
  }
  return odataResult
}

/**
 * Convert any result to the result object structure, which is expected of odata-v4.
 *
 * @param {*} result
 * @param {*} [info]
 * @returns {string | object}
 */
const toODataResult = (result, info) => {
  if (result == null) return ''

  let propertyName, isCollection
  if (info) {
    propertyName = info.metadata.propertyName
    isCollection = info.metadata.isCollection
  }

  if (isCollection && !Array.isArray(result)) result = [result]
  else if (!isCollection && Array.isArray(result)) result = result[0]

  let value = result
  if (typeof result === 'object') {
    if (propertyName) value = result[propertyName]
  }

  const odataResult = _cleanupMetadata({ value }, result)

  // REVISIT: Support exponential decimals header
  // REVISIT: we always assume minimal metadata right now
  _setContext(odataResult, info, isCollection)

  if (!isCollection && !propertyName) return odataResult.value

  return odataResult
}

module.exports = { toODataResult }
